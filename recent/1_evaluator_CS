#################################################################################
class JobRelevanceAssistant:
    """AI Assistant that evaluates job listings for interim manager relevance."""
    
    class SOClass(BaseModel):
        """Structured output for job relevance evaluation."""
        relevance_score: int  # 0-5 scale
        is_interim_suitable: bool
        job_title: str
        key_qualifications: list[TextCitation]
        seniority_level: str
        explanation: str
        specific_matches: list[TextCitation]
    
    def __init__(self, **kwargs):
        self.structured_output_switch = True
        self.model = kwargs.get('model', config.get_model('advanced_model'))
        self.max_tk = kwargs.get('max_tk', 128000)
        self.max_time_out = kwargs.get('max_time_out', 60)
        self.tk_encoding_name = kwargs.get('tk_encoding_name', 'cl100k_base')
        self.temperature = kwargs.get('temperature', 1.0)
        
        # Store the current content
        self.current_content = None
    
    def generate_developer_prompt(self) -> str:
        # Use configured prompt if available, otherwise use default
        prompt = config.get_prompt('job_relevance')
        if not prompt:
            # Fallback to original hardcoded prompt
            prompt = """
            You are an expert at evaluating job listings for their suitability for interim managers.
            
            An ideal interim manager position:
            - Is senior level (Director, VP, Head of Department, Senior Manager, Project Lead)
            - Involves project management, transformation, technical leadership, or strategic roles
            - Requires significant experience (5+ years)
            - Is often but not always described as temporary, contract, project-based, or fixed-term
            - Typically involves change management, turnaround, or solving specific business challenges
            - Is NOT entry-level, junior, or support staff
            
            German terms to look for:
            - "Interimsmanager" (interim manager)
            - "Projektleiter" (project leader)
            - "befristete Stelle" (temporary position)
            - "Führungskraft auf Zeit" (temporary leadership)
            - "Veränderungsprozess" (change process)
            - "Restrukturierung" (restructuring)
            
            IMPORTANT NOTES FOR SCORING:
            - Even if a job isn't explicitly described as "interim" but is at a senior level with project or transformation responsibilities, consider it potentially suitable
            - While temporary positions are ideal, senior management roles with project responsibility should still score at least 3, even if permanent
            - The most important criteria are level of seniority, leadership responsibilities, and project-oriented nature
            
            Analyze the provided job description and determine:
            1. Overall relevance score (0-5) for an interim manager
               - Score 0-1: Definitely not suitable (junior, entry-level, long-term operational)
               - Score 2: Has some senior aspects but lacks other key criteria
               - Score 3: Good match in seniority/scope, even if permanent position 
               - Score 4-5: Strong match including temporary nature or explicit interim roles
            2. Whether this job is suitable for an interim manager
            3. Key qualifications required
            4. Seniority level
            5. Specific aspects that make it suitable or unsuitable
            
            Provide your analysis in a structured format with the following fields:
            - relevance_score: Integer from 0-5
            - is_interim_suitable: Boolean (true if score ≥ 3)
            - job_title: String
            - key_qualifications: List of strings
            - seniority_level: String
            - explanation: String explaining your assessment
            - specific_matches: List of strings with specific text from the job that indicates suitability
            """
        return prompt
    
    def generate_developer_prompt_memory(self) -> str:
        return self.generate_developer_prompt()
    
    def generate_user_prompt(self) -> str:
        if not self.current_content:
            raise ValueError("No content provided")
        
        return self.current_content
    
    def __call__(self, content):
        self.current_content = content
        return self
