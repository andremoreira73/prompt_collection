class OpportunityExtractorAssistant:
    """AI Assistant that extracts structured job information from listings."""
    
    class SOClass(BaseModel):
        """Structured output for job information extraction."""
        job_title: str
        company_name: str
        location: str
        job_type: str
        description_summary: str
        responsibilities: list[TextCitation]
        requirements: list[TextCitation]
        keywords: list[TextCitation]
        url_found: str
        url_more_details: str
        is_generic_portal: bool
        specific_job_listings: list[TextDict]
    
    def __init__(self, **kwargs):
        self.structured_output_switch = True
        self.model = kwargs.get('model', config.get_model('advanced_model'))
        self.max_tk = kwargs.get('max_tk', 128000)
        self.max_time_out = kwargs.get('max_time_out', 20)
        self.tk_encoding_name = kwargs.get('tk_encoding_name', 'cl100k_base')
        self.temperature = kwargs.get('temperature', 1.0)
        
        # Store the current content and URL
        self.current_content = None
        self.current_url = None
    
    def generate_developer_prompt(self) -> str:
        # Use configured prompt if available, otherwise use default
        prompt = config.get_prompt('opportunity_extractor')
        if not prompt:
            # Fallback to original hardcoded prompt
            prompt = """
            You are an expert at extracting structured job information from websites.
            
            Analyze the provided webpage content and extract detailed information about job opportunities.
            Determine whether this is:
            1. A specific job listing page with a single position, OR
            2. A generic job portal/listing page with multiple positions
            
            For a specific job listing, extract comprehensive details.
            For a generic portal, identify individual job listings that might be relevant for interim managers.
            
            Provide the information in a structured format with the following fields:
            - job_title: String (main job title or portal title)
            - company_name: String
            - location: String (if available)
            - job_type: String (if available)
            - description_summary: String summarizing the job or portal
            - responsibilities: List of strings (for specific job)
            - requirements: List of strings (for specific job)
            - keywords: List of strings with key terms from the job
            - url_found: String (URL where you found this job)
            - url_more_details: String (URL that points to more details about this job)
            - is_generic_portal: Boolean
            - specific_job_listings: List of dictionaries with {"title": "job title", "description": "short description", "url": "link"} for each job found on a portal page
            """
        return prompt
    
    def generate_developer_prompt_memory(self) -> str:
        return self.generate_developer_prompt()
    
    def generate_user_prompt(self) -> str:
        if not self.current_content or not self.current_url:
            raise ValueError("No content or URL provided")
        
        return f"URL: {self.current_url}\n\nPage Content:\n{self.current_content}"
    
    def __call__(self, content, url):
        self.current_content = content
        self.current_url = url
        return self
